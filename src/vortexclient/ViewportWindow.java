/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vortexclient;

import java.awt.Dimension;
import java.awt.Rectangle;
import java.awt.Toolkit;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.rmi.RemoteException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import vortexserver.IRMIServer;


/**
 *
 * @author Skalitz
 */
public class ViewportWindow extends javax.swing.JFrame {
    public IRMIServer _objServer;
    private ServerOpen _serverOpen;
    
    /**
     * Creates new form MainGUI
     * @param objServer
     * @param serverOpen
     * @param host
     * @param clientId
     */
    public ViewportWindow(IRMIServer objServer, ServerOpen serverOpen, String host, String clientId) {
        initComponents();
        this.setTitle(host + " REMOTE - Vortex 2.0");
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation(dim.width/2-this.getSize().width/2, dim.height/2-this.getSize().height/2);
        _objServer = objServer;
        _serverOpen = serverOpen;
        VortexReceiveStream vrs = new VortexReceiveStream(_objServer, viewportLabel);
        vrs.start();
        
        ViewportWindow vw = this;
        vw.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                vrs.stop();
                try {
                    _objServer.unregisterClient(clientId);
                } catch (RemoteException ex) {
                    //Logger.getLogger(ViewportWindow.class.getName()).log(Level.WARNING, null, ex);
                }
                _serverOpen.setVisible(true);
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        viewportScrollPane = new javax.swing.JScrollPane();
        viewportLabel = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        btnTakeScreenshot = new javax.swing.JButton();
        btnSendFileClient = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Vortex v2.0 (Online)");
        setBackground(new java.awt.Color(255, 255, 255));
        setPreferredSize(new java.awt.Dimension(800, 600));
        setSize(new java.awt.Dimension(800, 600));

        viewportScrollPane.setViewportView(viewportLabel);
        viewportScrollPane.setViewportView(viewportLabel);
        viewportLabel.getAccessibleContext().setAccessibleName("viewportLabel");

        getContentPane().add(viewportScrollPane, java.awt.BorderLayout.CENTER);

        jPanel1.setBackground(new java.awt.Color(51, 255, 0));
        jPanel1.setOpaque(false);

        btnTakeScreenshot.setText("Take Screenshot");
        btnTakeScreenshot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTakeScreenshotActionPerformed(evt);
            }
        });
        jPanel1.add(btnTakeScreenshot);

        btnSendFileClient.setText("Send File");
        btnSendFileClient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendFileClientActionPerformed(evt);
            }
        });
        jPanel1.add(btnSendFileClient);

        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_END);

        jMenu3.setText("About");

        jMenuItem3.setText("About Vortex");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem3);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        JOptionPane.showMessageDialog(rootPane, "Designed and developed by Udhira Gunasekara.\nEmail: udhira.gunasekara@outlook.com", "About Vortex", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void btnTakeScreenshotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTakeScreenshotActionPerformed
        takeScreenshot(viewportLabel);
    }//GEN-LAST:event_btnTakeScreenshotActionPerformed

    private void btnSendFileClientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendFileClientActionPerformed
        FileTransfer ft = new FileTransfer(this, _objServer, true);
        ft.setVisible(true);
    }//GEN-LAST:event_btnSendFileClientActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewportWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewportWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewportWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewportWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                
            }
        });
    }
    
    public final void takeScreenshot(JLabel argPanel) {
        Rectangle rec = argPanel.getBounds();
        BufferedImage bufferedImage = new BufferedImage(rec.width, rec.height, BufferedImage.TYPE_INT_ARGB);
        argPanel.paint(bufferedImage.getGraphics());
        
        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy-MM-dd HH.mm.ss");
        LocalDateTime now = LocalDateTime.now();
        String imageFileName = System.getProperty("user.home") + File.separator + "Documents" + File.separator + "Vortex" + File.separator + "Captures" + File.separator + dtf.format(now) + ".png";
        
        try {
            // Create image file
            File imageFile = new File(imageFileName);
            imageFile.mkdirs();
            imageFile.createNewFile();
            // Use the ImageIO API to write the bufferedImage to an image file
            ImageIO.write(bufferedImage, "png", imageFile);
            JOptionPane.showMessageDialog(rootPane, "Screenshot saved.", "Info", JOptionPane.INFORMATION_MESSAGE, null);
        } catch (IOException ioe) {
            JOptionPane.showMessageDialog(rootPane, "An error occured while saving the screenshot.", "Error", JOptionPane.ERROR_MESSAGE, null);
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSendFileClient;
    private javax.swing.JButton btnTakeScreenshot;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel viewportLabel;
    private javax.swing.JScrollPane viewportScrollPane;
    // End of variables declaration//GEN-END:variables
}

